AWSTemplateFormatVersion: '2010-09-09'
Description: Create EC2 instances with Windows Server, install IIS on web servers, and install SSMS on database servers

Parameters:
  AvailabilityZone:
    Type: String
    Default: us-east-1a
    AllowedValues:
      - us-east-1a
      - us-east-2a
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  AdminPassword:
    Description: Password for the Windows Administrator account stored in AWS Systems Manager Parameter Store
    Type: AWS::SSM::Parameter::Value<String>
    Default: AdminPassword  # Replace with your parameter name
    NoEcho: true
  S3BucketName:
    Description: Production S3 Bucket
    Type: String 
    Default: productions3bucket2
   

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-073e3b46f8802d31b  # Replace with actual AMI ID for us-east-1
    us-east-2:
      AMI: ami-073e3b46f8802d31b  # Replace with actual AMI ID for us-east-2

Resources:
  # Web Servers
  ProdWebServer1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref WebInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          Install-WindowsFeature -Name Web-Server -IncludeManagementTools
          Start-IISSite -Name "Default Web Site"
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionIIS_blue1
          
# S3 Bucket with Encryption and Bucket Policy
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: MyS3Bucket

  # S3 Bucket Policy
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceSSL
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${MyS3Bucket.Arn}'
              - !Sub '${MyS3Bucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

          

  ProdWebServer2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref WebInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          Install-WindowsFeature -Name Web-Server -IncludeManagementTools
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionIIS_blue2

  ProdWebServer3:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref WebInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          Install-WindowsFeature -Name Web-Server -IncludeManagementTools
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionIIS_green1

  ProdWebServer4:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref WebInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          Install-WindowsFeature -Name Web-Server -IncludeManagementTools
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionIIS_green2

  # Database Servers
  ProdDatabaseServer1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref DatabaseInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          # Install SQL Server Management Studio (SSMS)
          $SSMSInstallerUrl = "https://aka.ms/ssmsfullsetup"
          $SSMSInstallerPath = "C:\SSMS-Setup-ENU.exe"
          Invoke-WebRequest -Uri $SSMSInstallerUrl -OutFile $SSMSInstallerPath
          Start-Process -FilePath $SSMSInstallerPath -ArgumentList "/install", "/quiet", "/norestart" -Wait
          Remove-Item $SSMSInstallerPath -Force
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionDatabaseServer1

  ProdDatabaseServer2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroupIds:
        - !Ref DatabaseInstanceSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          <powershell>
          net user Administrator '${AdminPassword}'
          # Install SQL Server Management Studio (SSMS)
          $SSMSInstallerUrl = "https://aka.ms/ssmsfullsetup"
          $SSMSInstallerPath = "C:\SSMS-Setup-ENU.exe"
          Invoke-WebRequest -Uri $SSMSInstallerUrl -OutFile $SSMSInstallerPath
          Start-Process -FilePath $SSMSInstallerPath -ArgumentList "/install", "/quiet", "/norestart" -Wait
          Remove-Item $SSMSInstallerPath -Force
          </powershell>
      Tags:
        - Key: Name
          Value: WindowsServerProductionDatabaseServer2

  # Security Group for Web Servers
  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0  # For production, restrict this to trusted IPs
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allows HTTP access to the IIS server


  # Security Group for Database Servers
  DatabaseInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access via port 3389
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0  # For production, restrict this to trusted IPs
          
Outputs:
  # Web Servers Outputs
  InstanceId1:
    Description: The Instance ID of the first EC2 instance
    Value: !Ref ProdWebServer1
  PublicIP1:
    Description: Public IP address of the first EC2 instance
    Value: !GetAtt ProdWebServer1.PublicIp
  InstanceId2:
    Description: The Instance ID of the second EC2 instance
    Value: !Ref ProdWebServer2
  PublicIP2:
    Description: Public IP address of the second EC2 instance
    Value: !GetAtt ProdWebServer2.PublicIp
  InstanceId3:
    Description: The Instance ID of the third EC2 instance
    Value: !Ref ProdWebServer3
  PublicIP3:
    Description: Public IP address of the third EC2 instance
    Value: !GetAtt ProdWebServer3.PublicIp
  InstanceId4:
    Description: The Instance ID of the fourth EC2 instance
    Value: !Ref ProdWebServer4
  PublicIP4:
    Description: Public IP address of the fourth EC2 instance
    Value: !GetAtt ProdWebServer4.PublicIp
  # Database Servers Outputs
  InstanceId5:
    Description: The Instance ID of the fifth EC2 instance
    Value: !Ref ProdDatabaseServer1
  PublicIP5:
    Description: Public IP address of the fifth EC2 instance
    Value: !GetAtt ProdDatabaseServer1.PublicIp
  InstanceId6:
    Description: The Instance ID of the sixth EC2 instance
    Value: !Ref ProdDatabaseServer2
  PublicIP6:
    Description: Public IP address of the sixth EC2 instance
    Value: !GetAtt ProdDatabaseServer2.PublicIp
  # S3 Bucket Output
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref MyS3Bucket
  S3BucketArn:
    Description: ARN of the S3 bucket
    Value: !GetAtt MyS3Bucket.Arn